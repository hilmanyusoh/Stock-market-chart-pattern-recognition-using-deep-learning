import pandas as pd
import numpy as np
from scipy.signal import find_peaks

def detect_wyckoff_events(df: pd.DataFrame, 
                          price_distance: int = 7, 
                          volume_percentile: float = 0.95) -> dict:


    prices = df['close'].values
    volume = df['volume'].values
    highs = df['high'].values
    lows = df['low'].values
    
    # 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå Volume ‡∏™‡∏π‡∏á (Climax Threshold)
    volume_threshold = np.percentile(volume, volume_percentile * 100)
    
    # 2. ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    peaks, _ = find_peaks(prices, distance=price_distance)
    troughs, _ = find_peaks(-prices, distance=price_distance)
    
    events = {
        "BC": [],  # Buying Climax (‡∏à‡∏∏‡∏î‡∏à‡∏ö‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô)
        "SC": [],  # Selling Climax (‡∏à‡∏∏‡∏î‡∏à‡∏ö‡∏Ç‡∏≤‡∏•‡∏á)
        "UTAD": [],# Upthrust After Distribution (‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô)
        "Spring": [], # Spring (‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏Ç‡∏≤‡∏•‡∏á)
    }

    # ==========================================================
    # üÖ∞Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Climax (BC/SC) - ‡πÉ‡∏ä‡πâ Volume ‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏•‡∏±‡∏Å
    # ==========================================================
    
    # BC (Buying Climax): ‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Volume ‡∏™‡∏π‡∏á
    for idx in peaks:
        if volume[idx] >= volume_threshold:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Volume ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Climax)
            window = max(10, price_distance)
            start = max(0, idx - window)
            end = min(len(volume), idx + 1)
            
            if volume[idx] == np.max(volume[start:end]):
                events['BC'].append(idx)
                
    # SC (Selling Climax): ‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Volume ‡∏™‡∏π‡∏á
    for idx in troughs:
        if volume[idx] >= volume_threshold:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Volume ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Climax)
            window = max(10, price_distance)
            start = max(0, idx - window)
            end = min(len(volume), idx + 1)
            
            if volume[idx] == np.max(volume[start:end]):
                events['SC'].append(idx)
                
    # ==========================================================
    # üÖ±Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Spring/UTAD - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (Trading Range)
    # (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ Trading Range ‡∏Å‡πà‡∏≠‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô)
    # ==========================================================

    # Note: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Spring/UTAD ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ Trading Range (TR) 
    # ‡∏à‡∏≤‡∏Å SC/BC ‡πÅ‡∏•‡∏∞ AR (Automatic Rally/Reaction) ‡∏Å‡πà‡∏≠‡∏ô 
    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô

    # 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î Climax (‡πÉ‡∏ä‡πâ BC/SC ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)
    
    if len(events['SC']) >= 1 and len(events['BC']) >= 1:
        
        # ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á SC ‡πÅ‡∏•‡∏∞ BC ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô Trading Range (TR) ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        
        # üí° Spring (Bear Trap - ‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö TR ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö)
        # ‡πÄ‡∏£‡∏≤‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠ Low ‡∏Ç‡∏≠‡∏á SC/ST ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        # ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö'

        # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 
        # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Spring/UTAD ‡πÉ‡∏ô Trading Range 100 ‡πÅ‡∏ó‡πà‡∏á
        
        TR_LENGTH = 100 
        
        for i in range(len(prices) - TR_LENGTH):
            tr_prices = prices[i:i + TR_LENGTH]
            tr_lows = lows[i:i + TR_LENGTH]
            tr_highs = highs[i:i + TR_LENGTH]
            
            # ‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï TR (‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î/‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á 50 ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Support/Resistance)
            support = np.min(tr_lows[:50])
            resistance = np.max(tr_highs[:50])
            
            # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Spring (Phase C ‡∏Ç‡∏≠‡∏á Accumulation)
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ Support ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ TR ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
            # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏π‡∏ó‡∏µ‡πà 20 ‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á TR_LENGTH
            for j in range(TR_LENGTH - 20, TR_LENGTH):
                
                # ‡∏ñ‡πâ‡∏≤ Low ‡∏ó‡∏∞‡∏•‡∏∏ Support ‡∏•‡∏á‡πÑ‡∏õ
                if tr_lows[j] < support:
                    
                    # ‡πÅ‡∏•‡∏∞ Close Price ‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ Support ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ
                    if tr_prices[j] > support * 0.99 and tr_prices[j] < resistance:
                        # Spring ‡∏ó‡∏µ‡πà index i + j 
                        events['Spring'].append(i + j)
                        break # ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡πà‡∏≠

            # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö UTAD (Phase C ‡∏Ç‡∏≠‡∏á Distribution)
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ Resistance ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ TR ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
            for j in range(TR_LENGTH - 20, TR_LENGTH):
                
                # ‡∏ñ‡πâ‡∏≤ High ‡∏ó‡∏∞‡∏•‡∏∏ Resistance ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
                if tr_highs[j] > resistance:
                    
                    # ‡πÅ‡∏•‡∏∞ Close Price ‡∏£‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ï‡πâ Resistance ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ
                    if tr_prices[j] < resistance * 1.01 and tr_prices[j] > support:
                        # UTAD ‡∏ó‡∏µ‡πà index i + j
                        events['UTAD'].append(i + j)
                        break # ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡πà‡∏≠

    # ‡∏•‡∏ö Index ‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    events['BC'] = sorted(list(set(events['BC'])))
    events['SC'] = sorted(list(set(events['SC'])))
    events['UTAD'] = sorted(list(set(events['UTAD'])))
    events['Spring'] = sorted(list(set(events['Spring'])))

    return events

